# -*- coding: utf-8 -*-
"""ForcastFinal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C-HalK4oxSS1hSiyz9rITODRPxvd9lAV
"""

import yfinance as yf
import pandas as pd
import numpy as np
import torch
import torch.nn as nn
import matplotlib.pyplot as plt
import io
import base64

# import pandas_datareader.data as web
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,mean_absolute_error, r2_score
from copy import deepcopy as dc
from sklearn.preprocessing import MinMaxScaler
from torch.utils.data import Dataset
from torch.utils.data import DataLoader

start_date = '1900-01-01'
end_date = '2025-01-01'

# Define competitor tickers
competitors = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'NVDA']

# Define the features and target variable
features = ['SP500_Close', 'NASDAQ_Close', 'DJI_Close', 'AAPL_Close', 'MSFT_Close', 'GOOGL_Close', 'AMZN_Close', 'NVDA_Close', '10Y_Treasury_Rate', '3M_Treasury_Rate', 'Close_lag1', 'Close_lag2', 'Close_roll_mean', 'Close_roll_std', 'RSI', 'MACD']
target = 'Close'

forcast_size = 50

# Lookback for time series
lookback = 30

batch_size = 28
global device
device = 'cuda:0' if torch.cuda.is_available() else 'cpu'

# LSTM model parameters
hidden_size = 4
num_stacked_layers = 1
learning_rate = 0.01
num_epochs = 100

def market_data(data, start_date, end_date):
  # Download S&P 500 data
  sp500 = yf.download('^GSPC', start=start_date, end=end_date)
  sp500 = sp500.rename(columns={'Close': 'SP500_Close', 'Volume': 'SP500_Volume'})
  data = data.merge(sp500[['SP500_Close', 'SP500_Volume']], left_index=True, right_index=True, how='left')

  # Download NASDAQ data
  nasdaq = yf.download('^IXIC', start=start_date, end=end_date)
  nasdaq = nasdaq.rename(columns={'Close': 'NASDAQ_Close', 'Volume': 'NASDAQ_Volume'})
  data = data.merge(nasdaq[['NASDAQ_Close', 'NASDAQ_Volume']], left_index=True, right_index=True, how='left')

  # Download Dow Jones data
  dowjones = yf.download('^DJI', start=start_date, end=end_date)
  dowjones = dowjones.rename(columns={'Close': 'DJI_Close', 'Volume': 'DJI_Volume'})
  data = data.merge(dowjones[['DJI_Close', 'DJI_Volume']], left_index=True, right_index=True, how='left')

  return data


def competitor_data(data, ticker, competitors):
  # Removing the selected stock
  competitors = [comp for comp in competitors if comp != ticker]

  # Download and merge competitor data
  for competitor in competitors:
      comp_data = yf.download(competitor, start=start_date, end=end_date)
      comp_data = comp_data.rename(columns={'Close': f'{competitor}_Close', 'Volume': f'{competitor}_Volume'})
      data = data.merge(comp_data[[f'{competitor}_Close', f'{competitor}_Volume']], left_index=True, right_index=True, how='left')

  return data

# def market_indicators(data):
#   # long term interest
#   interest_rate = web.DataReader('DGS10', 'fred', start_date, end_date)
#   interest_rate = interest_rate.rename(columns={'DGS10': '10Y_Treasury_Rate'})
#   data = data.merge(interest_rate, left_index=True, right_index=True, how='left')

#   #short term interest
#   interest_rate = web.DataReader('DGS3MO', 'fred', start_date, end_date)
#   interest_rate = interest_rate.rename(columns={'DGS3MO': '3M_Treasury_Rate'})
#   data = data.merge(interest_rate, left_index=True, right_index=True, how='left')

#   data = data.fillna(method='ffill')

#   return data

def market_indicators(data):
    # Fetch 10-year Treasury rate (DGS10)
    interest_rate_10y = yf.download('^TNX', start=start_date, end=end_date)['Close']
    interest_rate_10y = interest_rate_10y.rename('10Y_Treasury_Rate')  # Rename the Series
    data['10Y_Treasury_Rate'] = interest_rate_10y  # Assign to a new column in data

    # Fetch 3-month Treasury rate (DGS3MO)
    interest_rate_3mo = yf.download('^IRX', start=start_date, end=end_date)['Close']
    interest_rate_3mo = interest_rate_3mo.rename('3M_Treasury_Rate')  # Rename the Series
    data['3M_Treasury_Rate'] = interest_rate_3mo  # Assign to a new column in data

    data = data.fillna(method='ffill')

    return data

def feature_eng(data):
  # Lagged features
  data['Close_lag1'] = data['Close'].shift(1)
  data['Close_lag2'] = data['Close'].shift(2)

  # Rolling mean and standard deviation
  data['Close_roll_mean'] = data['Close'].rolling(window=20).mean()
  data['Close_roll_std'] = data['Close'].rolling(window=20).std()

  # RSI calculation
  def compute_rsi(data, window):
      delta = data['Close'].diff()
      gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()
      loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()
      rs = gain / loss
      return 100 - (100 / (1 + rs))

  data['RSI'] = compute_rsi(data, window=14)

  # MACD calculation
  data['EMA12'] = data['Close'].ewm(span=12, adjust=False).mean()
  data['EMA26'] = data['Close'].ewm(span=26, adjust=False).mean()
  data['MACD'] = data['EMA12'] - data['EMA26']

  # Drop rows with NaN values created by rolling calculations
  data = data.dropna()

  return data

def build_model_LR(data, ticker, features, target, forcast_size):
  features = [feature for feature in features if feature != f'{ticker}_Close']

  # Split the data
  X = data[features]
  y = data[target]

  train_size = int(len(data) - (forcast_size+1))

  X_train = X.iloc[:train_size]
  X_test = X.iloc[train_size:]
  y_train = y.iloc[:train_size]
  y_test = y.iloc[train_size:]

  # Train the model
  model = LinearRegression()
  model.fit(X_train, y_train)

  # Make predictions
  y_pred = model.predict(X_test)

  # Evaluate the model
  rmse = mean_squared_error(y_test, y_pred, squared=False)
  mae = mean_absolute_error(y_test, y_pred)
  mse = mean_squared_error(y_test, y_pred)
  r2 = r2_score(y_test, y_pred)

  def mean_absolute_percentage_error(y_true, y_pred):
      y_true, y_pred = np.array(y_true), np.array(y_pred)
      return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

  mape = mean_absolute_percentage_error(y_test, y_pred)
  y_pred = y_pred[1:]
  y_test = y_test[:-1]

  # Print the evaluation metrics
  print(f'RMSE: {rmse}')
  print(f'MAE: {mae}')
  print(f'MSE: {mse}')
  print(f'R-squared: {r2}')
  print(f'MAPE: {mape}%')

  return y_pred, y_test

def forcast_LR(y_pred, y_test):
  # Create a DataFrame to hold the actual and predicted values
  results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred}, index=y_test.index)

  # Plot the actual and predicted values
  plt.plot(results.index, results['Actual'], label='Actual')
  plt.plot(results.index, results['Predicted'], label='Predicted')
  plt.legend()
  plt.title('Actual vs Predicted Stock Prices(LR)')
  plt.xlabel('Date')
  plt.ylabel('Stock Price')
  # plt.show()

  # Save the plot as a PNG image in memory
  img = io.BytesIO()
  plt.savefig(img, format='png')
  img.seek(0)  # Rewind the file pointer to the beginning of the file

  # Encode the image as base64 to send to frontend
  img_base64 = base64.b64encode(img.read()).decode('utf-8')
  plt.close()

  return img_base64

"""# LSTM model"""

def prepare_dataframe_for_lstm(df, n_steps):
    df = dc(df)

    for i in range(1, n_steps+1):
        df[f'Close(t-{i})'] = df['Close'].shift(i)

    df.dropna(inplace=True)

    return df

class TimeSeriesDataset(Dataset):
    def __init__(self, X, y):
        self.X = X
        self.y = y

    def __len__(self):
        return len(self.X)

    def __getitem__(self, i):
        return self.X[i], self.y[i]

def feature_preprocessing(shifted_df, forcast_size, batch_size):
  shifted_df_as_np = shifted_df.to_numpy()
  scaler = MinMaxScaler(feature_range=(-1, 1))
  shifted_df_as_np = scaler.fit_transform(shifted_df_as_np)

  X = shifted_df_as_np[:, 1:]
  y = shifted_df_as_np[:, 0]
  X = dc(np.flip(X, axis=1))

  split_index = int(len(X) - (forcast_size+1))

  X_train = X[:split_index]
  X_test = X[split_index:]
  y_train = y[:split_index]
  y_test = y[split_index:]

  X_train = X_train.reshape((-1, lookback, 1))
  X_test = X_test.reshape((-1, lookback, 1))
  y_train = y_train.reshape((-1, 1))
  y_test = y_test.reshape((-1, 1))

  X_train = torch.tensor(X_train).float()
  y_train = torch.tensor(y_train).float()
  X_test = torch.tensor(X_test).float()
  y_test = torch.tensor(y_test).float()

  return scaler, X_train, X_test, y_train, y_test

class LSTM(nn.Module):
    def __init__(self, input_size, hidden_size, num_stacked_layers):
        super().__init__()
        self.hidden_size = hidden_size
        self.num_stacked_layers = num_stacked_layers

        self.lstm = nn.LSTM(input_size, hidden_size, num_stacked_layers,
                            batch_first=True)

        self.fc = nn.Linear(hidden_size, 1)

    def forward(self, x):
        batch_size = x.size(0)
        h0 = torch.zeros(self.num_stacked_layers, batch_size, self.hidden_size).to(device)
        c0 = torch.zeros(self.num_stacked_layers, batch_size, self.hidden_size).to(device)

        out, _ = self.lstm(x, (h0, c0))
        out = self.fc(out[:, -1, :])
        return out

def train_one_epoch(model, epoch, loss_function, train_loader, optimizer):
    model.train(True)
    print(f'Epoch: {epoch + 1}')
    running_loss = 0.0

    for batch_index, batch in enumerate(train_loader):
        x_batch, y_batch = batch[0].to(device), batch[1].to(device)

        output = model(x_batch)
        loss = loss_function(output, y_batch)
        running_loss += loss.item()

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if batch_index % 100 == 99:  # print every 100 batches
            avg_loss_across_batches = running_loss / 100
            print('Batch {0}, Loss: {1:.3f}'.format(batch_index+1,
                                                    avg_loss_across_batches))
            running_loss = 0.0
    print()

def validate_one_epoch(model, loss_function, test_loader):
    model.train(False)
    running_loss = 0.0

    for batch_index, batch in enumerate(test_loader):
        x_batch, y_batch = batch[0].to(device), batch[1].to(device)

        with torch.no_grad():
            output = model(x_batch)
            loss = loss_function(output, y_batch)
            running_loss += loss.item()

    avg_loss_across_batches = running_loss / len(test_loader)

    print('Val Loss: {0:.3f}'.format(avg_loss_across_batches))
    print('***************************************************')
    print()

def build_model_LSTM(X_train, X_test, y_train,y_test, learning_rate, num_epochs, scaler):
  train_dataset = TimeSeriesDataset(X_train, y_train)
  test_dataset = TimeSeriesDataset(X_test, y_test)

  train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
  test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)
  for _, batch in enumerate(train_loader):
      x_batch, y_batch = batch[0].to(device), batch[1].to(device)
      print(x_batch.shape, y_batch.shape)
      break

  model = LSTM(1, hidden_size, num_stacked_layers)
  model.to(device)

  loss_function = nn.MSELoss()
  optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

  for epoch in range(num_epochs):
      train_one_epoch(model, epoch, loss_function, train_loader, optimizer)
      validate_one_epoch(model, loss_function, test_loader)

  with torch.no_grad():
    predicted = model(X_train.to(device)).to('cpu').numpy()

  train_predictions = predicted.flatten()

  dummies = np.zeros((X_train.shape[0], lookback+1))
  dummies[:, 0] = train_predictions
  dummies = scaler.inverse_transform(dummies)
  train_predictions = dc(dummies[:, 0])

  dummies = np.zeros((X_train.shape[0], lookback+1))
  dummies[:, 0] = y_train.flatten()
  dummies = scaler.inverse_transform(dummies)
  new_y_train = dc(dummies[:, 0])

  test_predictions = model(X_test.to(device)).detach().cpu().numpy().flatten()

  dummies = np.zeros((X_test.shape[0], lookback+1))
  dummies[:, 0] = test_predictions
  dummies = scaler.inverse_transform(dummies)
  test_predictions = dc(dummies[1:, 0])

  dummies = np.zeros((X_test.shape[0], lookback+1))
  dummies[:, 0] = y_test.flatten()
  dummies = scaler.inverse_transform(dummies)
  new_y_test = dc(dummies[:-1, 0])

  return test_predictions, new_y_test

def forcast_LSTM(test_predictions, new_y_test):
  # LSTM prediction
  plt.plot(new_y_test, label='Actual Close')
  plt.plot(test_predictions, label='Predicted Close')
  plt.xlabel('Day')
  plt.ylabel('Close')
  plt.title('Actual vs Predicted Stock Prices(LSTM)')
  plt.legend()
  # plt.show()

  # Save the plot as a PNG image in memory
  img = io.BytesIO()
  plt.savefig(img, format='png')
  img.seek(0)  # Rewind the file pointer to the beginning of the file

  # Encode the image as base64 to send to frontend
  img_base64 = base64.b64encode(img.read()).decode('utf-8')
  plt.close()

  return img_base64

def final_forcast(y_pred, y_test, test_predictions):
  results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred}, index=y_test.index)
  for i in range(0,len(test_predictions)):
    results['Predicted'][i] = (results['Predicted'][i]*60 + test_predictions[i]*40)/100

  plt.plot(results.index, results['Actual'], label='Actual')
  plt.plot(results.index, results['Predicted'], label='Predicted')
  plt.legend()
  plt.title('Actual vs Predicted Stock Prices(Final)')
  plt.xlabel('Date')
  plt.ylabel('Stock Price')
  # plt.show()

  # Save the plot as a PNG image in memory
  img = io.BytesIO()
  plt.savefig(img, format='png')
  img.seek(0)  # Rewind the file pointer to the beginning of the file

  # Encode the image as base64 to send to frontend
  img_base64 = base64.b64encode(img.read()).decode('utf-8')
  plt.close()

  return img_base64

"""# Final Model(Combined)"""

def predict_LR(data, ticker, competitors, forcast_size, start_date, end_date, features, target):
  data = market_data(data, start_date, end_date)
  data = competitor_data(data, ticker, competitors)
  data = market_indicators(data)
  data = feature_eng(data)
  y_pred, y_test = build_model_LR(data, ticker, features, target, forcast_size)

  return y_pred, y_test

def predict_LSTM(data, forcast_size, start_date, end_date, lookback, batch_size, hidden_size, num_stacked_layers, learning_rate, num_epochs):
  shifted_df = prepare_dataframe_for_lstm(data, lookback)
  scaler, X_train, X_test, y_train, y_test = feature_preprocessing(shifted_df, forcast_size, batch_size)
  test_predictions, new_y_test = build_model_LSTM(X_train, X_test, y_train, y_test, learning_rate, num_epochs, scaler)

  return test_predictions, new_y_test

def forcaster(ticker, end_date, forcast_size, lookback=lookback, batch_size=batch_size, hidden_size=hidden_size, num_stacked_layers=num_stacked_layers, learning_rate=learning_rate, num_epochs=num_epochs, start_date=start_date, competitors=competitors, features=features, target=target):

  dataM = yf.download(ticker, start=start_date, end=end_date)

  data = dataM.copy()
  y_pred, y_test = predict_LR(data, ticker, competitors, forcast_size, start_date, end_date, features, target)

  data = dataM.copy()
  data = data[['Close']]
  test_predictions, new_y_test = predict_LSTM(data, forcast_size, start_date, end_date, lookback, batch_size, hidden_size, num_stacked_layers, learning_rate, num_epochs)

  img1 = forcast_LR(y_pred, y_test)
  img2 = forcast_LSTM(test_predictions, new_y_test)
  img3 = final_forcast(y_pred, y_test, test_predictions)

  return img1, img2, img3

  # return y_pred, y_test, test_predictions, new_y_test

# y_pred, y_test, test_predictions, new_y_test = 
# forcaster('NVDA', '2025-01-01', 50)

# forcast_LR(y_pred, y_test)
# forcast_LSTM(test_predictions, new_y_test)
# final_forcast(y_pred, y_test, test_predictions)